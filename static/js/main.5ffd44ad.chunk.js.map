{"version":3,"sources":["components/ParrotCard/parrot.js","components/Header/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["ParrotCard","props","react_default","a","createElement","className","alt","name","src","image","id","onClick","shuffle","Header","status","style","backgroundColor","children","Wrapper","Title","App","state","parrots","clickedParrotIDs","score","topScore","console","log","_this","includes","setState","push","length","alert","i","j","temp","Math","floor","random","_this2","this","components_Wrapper","components_Header","textAlign","color","components_Title","map","parrot","ParrotCard_parrot","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u6BAeeA,MAZf,SAAoBC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEjBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,GAAIT,EAAMS,GAAIC,QAAS,kBAAMV,EAAMW,QAAQX,EAAMS,KAAKL,UAAU,qBCE3FQ,MAPjB,SAAgBZ,GAEb,OAAMC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASS,OAAQb,EAAMa,OAAQC,MAAO,CAACC,gBAAiB,aAAcf,EAAMgB,iBCErFC,MAJf,SAAiBjB,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMgB,iBCG1BE,MAJf,SAAelB,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMgB,kBC8EvBG,6MA1EbC,MAAQ,CACNC,UACAC,iBAAkB,GAClBC,MAAO,EACPC,SAAU,GACVX,OAAQ,MAKVF,QAAU,SAACF,GACTgB,QAAQC,IAAI,WACZ,IAAIJ,EAAmBK,EAAKP,MAAME,iBAElC,GAAIA,EAAiBM,SAASnB,GAC5BkB,EAAKE,SAAS,CACZP,iBAAkB,GAClBC,MAAO,EACPV,OAAQ,2DAJZ,CAYA,GAJES,EAAiBQ,KAAKrB,GAIpBa,EAAiBS,SAAWJ,EAAKP,MAAMC,QAAQU,OAOjD,OANAJ,EAAKE,SAAS,CACZN,MAAO,EAEPD,iBAAkB,UAElBU,MAAM,iDAIVL,EAAKE,SAAS,CAAER,UAASC,mBAAkBC,MAAOD,EAAiBS,OAAQlB,OAAQ,KAGnF,IAAIoB,EAAI,EAAGC,EAAI,EAAGC,EAAO,KAEzB,IAAKF,EAAIZ,EAAQU,OAAS,EAAGE,EAAI,EAAGA,GAAK,EACvCC,EAAIE,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCE,EAAOd,EAAQY,GACfZ,EAAQY,GAAKZ,EAAQa,GACrBb,EAAQa,GAAKC,4EAMR,IAAAI,EAAAC,KACP,OACEvC,EAAAC,EAAAC,cAACsC,EAAD,KACExC,EAAAC,EAAAC,cAACuC,EAAD,KACAzC,EAAAC,EAAAC,cAAA,KAAGW,MAAO,CAAC6B,UAAW,WAAtB,kFACE1C,EAAAC,EAAAC,cAAA,MAAIW,MAAO,CAAC6B,UAAW,WAAvB,UAA0CH,KAAKpB,MAAMG,MAArD,qBAA8EiB,KAAKpB,MAAMI,UACzFvB,EAAAC,EAAAC,cAAA,MAAIW,MAAO,CAAC6B,UAAW,SAAUC,MAAO,QAASJ,KAAKpB,MAAMP,SAE9DZ,EAAAC,EAAAC,cAAC0C,EAAD,8BACCL,KAAKpB,MAAMC,QAAQyB,IAAI,SAAAC,GAAM,OAC5B9C,EAAAC,EAAAC,cAAC6C,EAAD,CACErC,QAAS4B,EAAK5B,QACdF,GAAIsC,EAAOtC,GACXwC,IAAKF,EAAOtC,GAEZD,MAAOuC,EAAOvC,kBAnER0C,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5ffd44ad.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ParrotCard(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n      \r\n    <img alt={props.name} src={props.image} id={props.id} onClick={() => props.shuffle(props.id)} className=\"clicked\"/>\r\n      \r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ParrotCard;\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props){\n\n   return<div className=\"header\" status={props.status} style={{backgroundColor: \"lavender\"}}>{props.children}</div>;\n\n}\n    \n  \n  export default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;\r\n","import React, { Component } from \"react\";\nimport ParrotCard from \"./components/ParrotCard/parrot\";\nimport Header from \"./components/Header\"\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport parrots from \"./parrots.json\";\n\nclass App extends Component {\n  state = {\n    parrots,\n    clickedParrotIDs: [],\n    score: 0,\n    topScore: 12,\n    status: \"\"\n  }\n\n\n\n  shuffle = (id) => {\n    console.log(\"CAW CAW\")\n    let clickedParrotIDs = this.state.clickedParrotIDs;\n      \n    if (clickedParrotIDs.includes(id)) {\n      this.setState({\n        clickedParrotIDs: [],\n        score: 0,\n        status: \"You lost loser!!!! Click on an image to try again.\"\n      })\n      return\n    } else {\n      clickedParrotIDs.push(id);\n    }\n   \n\n    if (clickedParrotIDs.length === this.state.parrots.length) {\n      this.setState({\n        score: 0,\n        // status: \"You won! Your memory is on fleek.\",\n        clickedParrotIDs: []\n      }); \n        alert(\"You won! Your memory is on fleek. Play again?\");\n      return\n    }\n\n    this.setState({ parrots, clickedParrotIDs, score: clickedParrotIDs.length, status: \"\" });\n\n    //fisher-yates shuffle\n    var i = 0, j = 0, temp = null\n\n    for (i = parrots.length - 1; i > 0; i -= 1) {\n      j = Math.floor(Math.random() * (i + 1))\n      temp = parrots[i]\n      parrots[i] = parrots[j]\n      parrots[j] = temp\n    }\n\n\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Header>\n        <p style={{textAlign: \"center\"}}>Test your memory! You can only click an image once. Score of 12 wins the game.</p>\n          <h2 style={{textAlign: \"center\"}}>Score: {this.state.score} | Score to meet: {this.state.topScore}</h2>\n          <h3 style={{textAlign: \"center\", color: \"red\"}}>{this.state.status}</h3>\n        </Header>\n        <Title>Clicky Parrot Shuffle</Title>\n        {this.state.parrots.map(parrot => (\n          <ParrotCard\n            shuffle={this.shuffle}\n            id={parrot.id}\n            key={parrot.id}\n            // name={parrot.name}\n            image={parrot.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}